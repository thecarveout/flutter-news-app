import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_fonts/google_fonts.dart';
import 'article_page.dart';
import 'about_page.dart';
import 'package:intl/intl.dart';

class FrontPage extends StatefulWidget {
  const FrontPage({Key? key}) : super(key: key);

  @override
  _FrontPageState createState() => _FrontPageState();
}

class _FrontPageState extends State<FrontPage> {
  final int _limit = 9;
  List<DocumentSnapshot> _recentPosts = [];
  DocumentSnapshot? _lastDoc;
  bool _isLoadingMore = false;
  bool _hasMore = true;

  String _selectedDrawerItem = 'Home'; // Initial selected item

  @override
  void initState() {
    super.initState();
    _loadMorePosts();
  }

  Future<void> _loadMorePosts() async {
    if (_isLoadingMore || !_hasMore) return;

    setState(() => _isLoadingMore = true);

    Query query = FirebaseFirestore.instance
        .collection('blog')
        .where('category', isNotEqualTo: 'Top')
        .orderBy('created_on', descending: true)
        .limit(_limit);

    if (_lastDoc != null) {
      query = query.startAfterDocument(_lastDoc!);
    }

    final snapshot = await query.get();

    if (snapshot.docs.isNotEmpty) {
      _lastDoc = snapshot.docs.last;
      _recentPosts.addAll(snapshot.docs);
    }

    setState(() {
      _isLoadingMore = false;
      _hasMore = snapshot.docs.length == _limit;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Get the current date and time
    final now = DateTime.now();
    final formattedDateTime = DateFormat('EEEE, MMMM d, yyyy').format(now);

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: Colors.white,
        toolbarHeight: 120,
        flexibleSpace: Center(
          child: Container(
            constraints: const BoxConstraints(maxWidth: 400),
            padding: const EdgeInsets.only(top: 10),
            color: Colors.white,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.network(
                  'https://firebasestorage.googleapis.com/v0/b/thecarveout-ce0f3.firebasestorage.app/o/tvsi_logo_1.png?alt=media&token=7f2fa7d6-f0a7-4fc6-abe5-5feb01a2844c',
                  fit: BoxFit.contain,
                  height: 60,
                ),
                const SizedBox(height: 0), // this adds some space between the logo and the date
                Text(
                  formattedDateTime,
                  style: const TextStyle(fontSize: 12, color: Colors.grey),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(1.0),
          child: Container(
            color: Colors.grey[300],
            height: 1.0,
          )
        )
      ),
      drawer: Drawer (
        backgroundColor: Colors.black,
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
          /*   const DrawerHeader(
              decoration: BoxDecoration(color: Colors.black),
              child: Text ('Drawer Header', style: TextStyle(color: Colors.white, fontSize: 24)
              ),              
            ), */
            ListTile(
              leading: const Icon(Icons.home, color: Colors.white),
              title: const Text('Home', style: TextStyle(color: Colors.white)),
              onTap: () {
                setState(() {
                  _selectedDrawerItem = 'Home';
                });
                Navigator.pop(context); // Close the drawer
                },
              ),
              ListTile(
                leading: const Icon(Icons.pages, color: Colors.white),
                title: const Text('About', style: TextStyle(color: Colors.white)),
                selected: _selectedDrawerItem == 'About', // Highlight if selected
                onTap: () {
                  Navigator.pop(context);
                  setState(() {
                    _selectedDrawerItem = 'About';
                  });
                  Navigator.push(context, MaterialPageRoute(builder: (context) => AboutPage()));
                },
              )
          ],
        ),
      ),
      body: Center(
        child: Container(
          decoration: BoxDecoration(color: Colors.white),
          constraints: const BoxConstraints(maxWidth: 860),
          padding: const EdgeInsets.all(12),
          child: FutureBuilder<QuerySnapshot>(
            future: FirebaseFirestore.instance
                .collection('blog')
                .where('category', isEqualTo: 'Top')
                .limit(1)
                .get(),
            builder: (context, topSnapshot) {
              if (topSnapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }

              if (!topSnapshot.hasData || topSnapshot.data!.docs.isEmpty) {
                return const Center(child: Text('No Blog Posts Found'));
              }

              final topDoc = topSnapshot.data!.docs.first;
              final topData = topDoc.data() as Map<String, dynamic>;

              return Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  InkWell(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ArticlePage(data: topData),
                        ),
                      );
                    },
                    child: LayoutBuilder(
                      builder: (context, constraints) {
                        bool isSmallScreen = constraints.maxWidth < 600;
                        return isSmallScreen
                            ? Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (topData['header_image'] != null)
                                    Image.network(
                                      topData['header_image'],
                                      width: double.infinity,
                                      height: 200,
                                      fit: BoxFit.cover,
                                    )
                                  else
                                    const Icon(Icons.image_not_supported, size: 48),
                                  const SizedBox(height: 12),
                                  Text(
                                    topData['name'] ?? 'No Title',
                                    style: GoogleFonts.merriweather(
                                      fontSize: 24,
                                      fontWeight: FontWeight.w900,
                                      height: 1.2,
                                      letterSpacing: -1,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  Text(
                                    topData['blurb'] ?? 'No blurb available',
                                    style: const TextStyle(fontSize: 14),
                                  ),
                                ],
                              )
                            : Row(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  if (topData['header_image'] != null)
                                    Expanded(
                                      flex: 1,
                                      child: Image.network(
                                        topData['header_image'],
                                        height: 200,
                                        fit: BoxFit.cover,
                                      ),
                                    )
                                  else
                                    const Expanded(
                                      flex: 1,
                                      child: Icon(Icons.image_not_supported, size: 48),
                                    ),
                                  const SizedBox(width: 12),
                                  Expanded(
                                    flex: 1,
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          topData['name'] ?? 'No Title',
                                          style: GoogleFonts.merriweather(
                                            fontSize: 28,
                                            fontWeight: FontWeight.w900,
                                            height: 1.2,
                                            letterSpacing: -1,
                                          ),
                                        ),
                                        const SizedBox(height: 8),
                                        Text(
                                          topData['blurb'] ?? 'No blurb available',
                                          style: const TextStyle(fontSize: 14, color: Colors.grey),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              );
                      },
                    ),
                  ),
                  const Divider(height: 32),
                  Expanded(
                    child: SingleChildScrollView(
                      child: Column(
                        children: [
                          Wrap(
                            spacing: -2,
                            runSpacing: 16,
                            children: _recentPosts.map((doc) {
                              final data = doc.data() as Map<String, dynamic>;
                              return GestureDetector(
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => ArticlePage(data: data),
                                    ),
                                  );
                                },
                                child: Container(
                                  width: MediaQuery.of(context).size.width < 600 ? double.infinity : 280,
                                  padding: const EdgeInsets.all(12),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      if (data['header_image'] != null)
                                        ClipRRect(
                                          child: Image.network(
                                            data['header_image'],
                                            height: 140,
                                            width: double.infinity,
                                            fit: BoxFit.cover,
                                          ),
                                        )
                                      else
                                        const Icon(Icons.image_not_supported),
                                      const SizedBox(height: 8),
                                      Text(
                                        data['name'] ?? 'No Title',
                                        style: GoogleFonts.merriweather(
                                          fontSize: 18,
                                          fontWeight: FontWeight.w900,
                                          height: 1.3,
                                          letterSpacing: -.8,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        data['blurb'] ?? 'No blurb available',
                                        maxLines: 3,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(fontSize: 14, color: Colors.grey),
                                      ),
                                    ],
                                  ),
                                ),
                              );
                            }).toList(),
                          ),
                          if (_isLoadingMore)
                            const Padding(
                              padding: EdgeInsets.all(16),
                              child: CircularProgressIndicator(),
                            )
                          else if (_hasMore)
                            TextButton(
                              onPressed: _loadMorePosts,
                              child: const Text('Load More'),
                            ),
                        ],
                      ),
                    ),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }
}
// search page
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Still needed for DocumentSnapshot in _lastDoc (for now)
import 'package:intl/intl.dart'; // For date formatting

// Import your custom widgets and services
import 'package:congress_app/services/firestore_service.dart';
import 'package:congress_app/models/article.dart';
import 'package:congress_app/widgets/CustomAppBar.dart';

class SearchPage extends SearchDelegate {
  CollectionReference _firebaseFirestore =
    FirebaseFirestore.instance.collection("blog");

  @override
  Widget build(BuildContext context) {

    final formattedDateTime = DateFormat('EEEE, MMMM d, yyyy').format(DateTime.now()); // Changed 'EEEE, MMMM d,YYYY' to 'EEEE, MMMM d,yyyy' for correct year formatting

    return Scaffold(
    backgroundColor: Colors.white,
    appBar: CustomAppBar(
         // Use your custom AppBar
        formattedDate: formattedDateTime, // Pass the formatted date
      ),
    body: SingleChildScrollView(
      child: Center(
        child: Container(
            height: 48,
            decoration: const BoxDecoration(color: Colors.white),
            constraints: const BoxConstraints(maxWidth: 860),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start, // Already correctly set to start
              verticalDirection: VerticalDirection.down,   // This is default and usually not needed for simple Column
              crossAxisAlignment: CrossAxisAlignment.start, // Already correctly set to start
              children: [ 
                TextField(
                decoration: InputDecoration(
                    prefixIcon: const Icon(Icons.search),
                    suffixIcon: IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: () {
                        /* Clear the search field */
                      },
                    ),
                    hintText: 'Search...',
                    border: InputBorder.none),
                ),
              ]
            ),
        ),
      ),
    )
  );
}
}
